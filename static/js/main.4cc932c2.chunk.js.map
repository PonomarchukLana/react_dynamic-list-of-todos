{"version":3,"sources":["api.ts","types/types.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helper.ts","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortBy","TodoList","todos","getCurrentTodoId","currentTodoId","className","map","id","completed","title","cn","type","onClick","TodoFilter","getQuery","query","getSortBy","onChange","e","sortBy","Completed","Active","All","mapGetSortBy","target","value","placeholder","Loader","TodoModal","currentTodo","onClose","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","setQuery","setSortBy","setCurrentTodoId","setCurrentTodo","currentTodos","data","copiedData","filter","toLowerCase","includes","Boolean","getCurrentData","find","todo","length","ReactDOM","render","document","getElementById"],"mappings":"gPAcA,SAASA,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICnBKC,E,iBAAAA,K,OAAAA,I,mBAAAA,I,0BAAAA,M,gCCKCC,EAA4B,SAAC,GAMpC,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,iBACAC,EAEC,EAFDA,cAOF,OACE,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,MAAlB,OACT,qBAAI,UAAQ,OAAOJ,UAAU,GAA7B,UACE,oBAAIA,UAAU,eAAd,SAA8BE,IAC9B,oBAAIF,UAAU,eAAd,SACGG,GACC,sBAAMH,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWK,IAAG,CACZ,mBAAoBF,EACpB,mBAAoBA,IAHxB,SAMGC,MAGL,oBAAIJ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVM,KAAK,SACLC,QAAS,WA5CrBT,EA4CyCI,IAJ/B,SAME,sBAAMF,UAAU,OAAhB,SACGD,IAAkBG,EACjB,mBAAGF,UAAU,qBAEb,mBAAGA,UAAU,uBA9BcE,YCblCM,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,UAApB,OACzC,uBAAMX,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACEY,SAAU,SAAAC,GAAC,OAAIF,EArBJ,SAACG,GACpB,OAAQA,GACN,IAAK,YACH,OAAOnB,EAAOoB,UAEhB,IAAK,SACH,OAAOpB,EAAOqB,OAKhB,QACE,OAAOrB,EAAOsB,KASeC,CAAaL,EAAEM,OAAOC,SAC/C,UAAQ,eAFV,UAIE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGpB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRM,KAAK,OACLN,UAAU,QACVqB,YAAY,YACZD,MAAOV,EACPE,SAAU,SAAAC,GAAC,OAAIJ,EAASI,EAAEM,OAAOC,UAEnC,sBAAMpB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdU,GACC,sBAAMV,UAAU,yBAAhB,SACE,wBACE,UAAQ,oBACR,aAAW,eACXM,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAME,EAAS,gBCzDvBa,G,MAAmB,kBAC9B,qBAAKtB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCMNuB,EAA6B,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACxD,EAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,qBAAU,WLYW,IAACC,KKXZN,EAAYM,OLWmB9C,EAAG,iBAAiB8C,KKX/BvC,KAAKqC,KAChC,IAGD,sBAAK5B,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEb2B,EAGA,sBAAK3B,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYwB,EAAYtB,MAGxB,wBACE,aAAW,cACXI,KAAK,SACLN,UAAU,SACV,UAAQ,cACRO,QAAS,kBAAMkB,EAAQ,YAI3B,sBAAKzB,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGwB,EAAYpB,QAGf,oBAAGJ,UAAU,QAAQ,UAAQ,aAA7B,UACGwB,EAAYrB,UACX,wBAAQH,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OAED,mBAAG+B,KAAI,iBAAYJ,EAAKK,OAAxB,SACGL,EAAKM,gBAnCd,cAAC,EAAD,QCRKC,G,MAAgB,WAC3B,MAA0BR,mBAAiB,IAA3C,mBAAO7B,EAAP,KAAcsC,EAAd,KACA,EAA0BT,mBAAS,IAAnC,mBAAOhB,EAAP,KAAc0B,EAAd,KACA,EAA4BV,mBAAiB/B,EAAOsB,KAApD,mBAAOH,EAAP,KAAeuB,EAAf,KACA,EAA0CX,mBAAwB,MAAlE,mBAAO3B,EAAP,KAAsBuC,EAAtB,KACA,EAAsCZ,mBAAsB,MAA5D,mBAAOF,EAAP,KAAoBe,EAApB,KAEMC,ECpBsB,SAC5BC,EAD4B,GAKP,IAFnB/B,EAEkB,EAFlBA,MACAI,EACkB,EADlBA,OAEE4B,EAAU,YAAOD,GAcrB,OAZI/B,IACFgC,EAAaA,EAAWC,QAAO,YAC7B,OAD4C,EAAZvC,MACnBwC,cAAcC,SAASnC,EAAMkC,mBAIxB,kBAAX9B,IACT4B,EAAaA,EAAWC,QAAO,YAC7B,OADgD,EAAhBxC,YACX2C,QAAQhC,OAI1B4B,EDAcK,CAAqBlD,EAAO,CAAEa,QAAOI,WAU1D,OARAe,qBAAU,WNAkB7C,EAAY,UAAUO,MAAK,SAAAM,GAAK,OAAIA,KMCnDN,KAAK4C,KACf,IAEHN,qBAAU,WACRU,EAAe1C,EAAMmD,MAAK,SAAAC,GAAI,OAAIA,EAAK/C,KAAOH,MAAkB,QAC/D,CAACA,IAGF,qCACE,qBAAKC,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACES,SAAU2B,EACV1B,MAAOA,EACPC,UAAW0B,MAIf,qBAAKrC,UAAU,QAAf,SACoB,IAAjBH,EAAMqD,OACL,cAAC,EAAD,IAEA,cAAC,EAAD,CACErD,MAAO2C,EACP1C,iBAAkBwC,EAClBvC,cAAeA,aAQ1ByB,GAAe,cAAC,EAAD,CAAWA,YAAaA,EAAaC,QAASa,SE3DpEa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4cc932c2.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos').then(todos => todos);\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export type Data = {\n  title: string;\n  completed: boolean;\n};\n\nexport enum SortBy {\n  All = '',\n  Active = 0,\n  Completed = 1,\n}\n\nexport type Options = {\n  query: string;\n  sortBy: SortBy;\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  getCurrentTodoId: (arg: number) => void;\n  currentTodoId: number | null;\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    getCurrentTodoId,\n    currentTodoId,\n  },\n) => {\n  const handleOnClick = (value: number) => {\n    getCurrentTodoId(value);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({ id, completed, title }) => (\n          <tr data-cy=\"todo\" className=\"\" key={id}>\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleOnClick(id)}\n              >\n                <span className=\"icon\">\n                  {currentTodoId === id ? (\n                    <i className=\"far fa-eye-slash\" />\n                  ) : (\n                    <i className=\"far fa-eye\" />\n                  )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { SortBy } from '../../types/types';\n\ntype Props = {\n  getQuery: (arg: string) => void;\n  query: string;\n  getSortBy: (arg: SortBy) => void;\n};\n\nconst mapGetSortBy = (sortBy: string): SortBy => {\n  switch (sortBy) {\n    case 'completed':\n      return SortBy.Completed;\n\n    case 'active':\n      return SortBy.Active;\n\n    case 'all':\n      return SortBy.All;\n\n    default:\n      return SortBy.All;\n  }\n};\n\nexport const TodoFilter: React.FC<Props> = ({ getQuery, query, getSortBy }) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          onChange={e => getSortBy(mapGetSortBy(e.target.value))}\n          data-cy=\"statusSelect\"\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={e => getQuery(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right btn-icon\">\n          <button\n            data-cy=\"clearSearchButton\"\n            aria-label=\"clear search\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => getQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  currentTodo: Todo;\n  onClose: (arg: null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(currentTodo.userId).then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            <button\n              aria-label=\"close modal\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { getTodos } from './api';\nimport { getCurrentData } from './helper';\nimport { SortBy } from './types/types';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [sortBy, setSortBy] = useState<SortBy>(SortBy.All);\n  const [currentTodoId, setCurrentTodoId] = useState<null | number>(null);\n  const [currentTodo, setCurrentTodo] = useState<null | Todo>(null);\n\n  const currentTodos = getCurrentData<Todo>(todos, { query, sortBy });\n\n  useEffect(() => {\n    getTodos().then(setTodos);\n  }, []);\n\n  useEffect(() => {\n    setCurrentTodo(todos.find(todo => todo.id === currentTodoId) || null);\n  }, [currentTodoId]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                getQuery={setQuery}\n                query={query}\n                getSortBy={setSortBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0 ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={currentTodos}\n                  getCurrentTodoId={setCurrentTodoId}\n                  currentTodoId={currentTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal currentTodo={currentTodo} onClose={setCurrentTodoId} />}\n    </>\n  );\n};\n","import { Data, Options } from './types/types';\n\nexport const getCurrentData = <T>(\n  data: Array<T & Data>,\n  {\n    query,\n    sortBy,\n  }: Options): T[] => {\n  let copiedData = [...data];\n\n  if (query) {\n    copiedData = copiedData.filter(({ title }) => {\n      return title.toLowerCase().includes(query.toLowerCase());\n    });\n  }\n\n  if (typeof sortBy === 'number') {\n    copiedData = copiedData.filter(({ completed }) => {\n      return completed === Boolean(sortBy);\n    });\n  }\n\n  return copiedData;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}